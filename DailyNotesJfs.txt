on-1  off-0 ----->binary lang        --------------> ascii/unicode 

programming languages -------------> program(set of instructions)

					
scripting lang - designing of website
	

programming lang - devlop sofware


							computer langs
									|
					scripting lang		programming languages
													|
		html,css,bootstap,react....			pop			  oop	
									Procedure orientedp 	object oriented p
											basic,				java,.net,python...
									
security:-Encapsulation,Abstraction

performance :-Inheritance,Ploymorphism


java:-

platform independent :- 


Garbage collector :- 


jse/j2se:-standalone app's -calculator(server-client)-core java


jee/j2ee:-distributed app's-zomato(server-client)-Adv java


jme/j2me:-mobile app's-details of core java

	
	shortcut's :-
	
		print ---->syso   ctrl+space
	
	
	
	
	alphabets -----keywords(reserved word)'
	
	
	
	Datatypes :-  (1)primitive dt's 
				(2)Non-primitive dt's
				
				
	variables :-syntax 
	
				datatype varname;  ------>declaration of a variable
					
				datatype varname = value;   ------>initialization of a variable
				
				
					local variable				global variables
					
											static				instance	
											
											
syntax:- 

static:- 		static  datatype varname = value; 

instance :- 		datatype varname = value;


Access:-

static :- static prop's can be accessed by the class refernce

instance :- instance props's can be acccessed by the object reference

				syntax:- Classname objname = new Classname();
				
				
				
memory allocation :-

static :- static prop's will get the memory space only once when the class loads into the jvm.

instance :-instance prop's will get the memory space for every object creation.



where to use :-

static :- common data  ex:- nationality

instance :- unique data  ex:-aadhar number


in the memory:-

static :-method area

instance :- heap area



								operators :-
								==========
								
		a  (operators)+  b(operand)
		
		
	ULTRA AB :-

Unary Operators :-	 a--,a++,-a,--a,++a
	

Logical Operators :-&&,||

Ternary operators :- ?():()	

Relational Operators

Assignment Operators

Arithematic Operators

Bitwise Operators					
			
			
	Methods :- A set of statements altogether perfroms a task.
	=========		based on syntax.2 types :-
			
	syntax :-
	
				accessmodifier returntype metname(params..){
				
				//body
				
				}
				
				
		static method :-
		=============
			syntax :-
	
				accessmodifier  static returntype metname(params..){
				
				//body
				
				}
		
		dynamic method:-
		==============		
				syntax :-
	
				accessmodifier returntype metname(params..){
				
				//body
				
				}	
				
				
		class = var + method(group members+ member functions)	
			
		 classname obj; -------> obj declaration 	
		 
		 classname obj = new classname(); ------------> obj initialization
		 
		 
		 
	Inheritance :- Accquiring the parent class prop's to the child class.
	===========
	
					*Code Reausability ---------> Performance
	
				extends 						implements
				
			class---->class
			
			
		class A{-
		100 methods
		}
		
		calss B extends A{
		10 method     ----------->110 methods
		}
		class C extends B{
		}
		------------------------------------
		class A{			class B
		
		add(a,b){			add(x,y){
		
		(a+b);}				(x*y);
		
		
		class C extends A,B{
		
		add(3,4);--------->7,12

		
		
		*M.I is not supported in java @ class level
		
		*M.I is supported in java @ interface level 

		
	methods types based on method body :- 2 types 
	
	(1)concrete method :- method with method body/Implementation
	
	
				a.m returntype methoname(params..){
				//body}
	
	
	(2)abstract method :- method without methodBody/Implementation
	
	interface :-		a.m returntype methodname(params..);

	abstract class :- a.m abstract return methodname(params);




	class  = it's the only collection of concrete methods
	
	interface = it's the only collection of abstract methods
	
	abstract class = it is the combination of both concrete methods + abstract methods


		
	*Default parent class for every java file is "java.lang.Object"	

	*Default package for every java file is "java.lang"
			
			
		

	Abstraction :- To Hide the business logic.
	===========
					*Security
	
	class ---(0%)     abstract class ---(50%)   interface----(100%)
	
	
	
	Ploymorphism :- 
	=============
	
	(1)Method Overloading :- the method name is same but difference is in the parameters
										(a)type of params..
										(b)order of params..
										(c)no:of params...
	
	(2)Method Overriding:- the method name is same but the body/Implementation is different
	
	
						*Performance
	
	class Parent{
	
	1000Cr.()
	
	marraige(){
	Kajol}
	
	methods()
	
	}
	
	
	class Child extends Parent{
	
	1000Cr.()
	
	@Override
	marraige(){
	deepika
	
	}
	
	methods()
	
	}
	
	
	Constructors :-To initiaze the objects
	------------
		
		
		classname obj = new classname();
		
		syntax:-
				
				a.m classname(){  ------->default constr
				
				
				}
				
		patametrized costr :- 
		
				a.m classname(params..){
				}
	
	* Constructor call must be the first statement in a constructor
	
	
	Encapsulation:- Wraps up the personal data into a single unit/entity(class).
				
				* Security
				
	
	
									Exception Handling:-
									==================
		
		(1)To terminate our program in a normal way
		
		(2) To throw user friendly error msg's.
	
	
	
	Arrays:- it is container of variables which stores elements with similar data type.
	
	syntax:- 
	
	        (1) int arrname[][][] = {(1,2,1),(1,2,1),(1,2,1),(1,2,1)}
			
			(2)int arranme[] = new int[12];
			
				arrname[4] = 45;
				
			(3)int arranme[]=new int[]{1,2,4,4,6,6,7,7,8};
	
	limitations:-
	
		(1)It is fixed in size.
		
		(2)No utility methods
		
		(3)stores only homogenous elements.
		
		


Collections framework:-  java.util.*
============----------
	
	
	Advantages:-
	
		(1)It is not fixed in size.
		
		(2)Lots of utility methods
		
		(3)stores only homogenous/heterogenous elements.
		


lang :- Comparable - CompareTo(); - cso

util:-Comparator - Compare(a,b); - nso     apple,ball (a-b=>98-99 = -(-ve))


Date ----->util
	  
	 java 8
	 
	 
	 java.time
	 
	 LocalDate
	 
	 Local
	
			
	File Handling:- java.io
		
		
	  Create a file :- File 
	  
	  Write into a file :- FileWriter
						
						   BufferedWriter
						   
						   PrintWriter
						   
		Read from a file :- FileReader
		
							BufferedReader
							
							
	String  name= "pen";		
	
			
	String 					StringBuffer			StringBuilder		
	immutable				mutable					mutable
							sync					non-sync
							
										Database:-
										=========
		Data :- Raw info 
		
		Database :- Organised collection of the data.
		
											
		book	563		
		
		pen		343
		
		orange   345
		
		
		rdbs :- tables =row(records) + columns(fields)
		
		sql:-
		
		quieres:- a command to do any operation in db.
		
		
		DDL(Data Definition lang):-create,alter,rename,truncate,drop		[Auto Commited]
		
		DML(Data Manipulation lang):- insert,update,delete					[Not Auto Committed]
		
		DRL(Data Retrival lang):- select
		
		DCL(Data Control lang):-grant,revoke
		
		TCL(Transaction Control lang) :- commit(ctrl+s),rollback(ctrl+z).
		
		
		
	To create a user db:-

		
		(1)conn /as sysdba;
		
		(2)create user username identified by password;
		
		(3)grant connect, resource to username;
		
		(4)conn username/password;
		
		
		
		create table emp(name varchar2(10),id number(10),add varchar2(10));
		
		
		truncate:- it will eraises all the records(rows)
		
		drop :- it will deletes the entire table from the db.
		
		delete :- we can delete the required rows. 
		
		
									jdbc:-(java database connectivity)
									
	
	(1)Loading the driver class 
	
	(2)Create the connection
	
	(3)Create the statement
	
	(4)Excute the statement
	
	(5)Close the connections
		
		
		limitation :-
		
	
	(1)Queries
	
	(2)need to create the table 
	
	(3)boiler plate code(duplicate code)
	
	(4)same file to logic,db prop's
	
	(5)Exception Handling
	
	
	
	
	
	jpa(java persistence API):-specification
	=========================
	
	(1)No quieres
	
	(2)No table creation
	
	(3)No bolier plate code
	
	(4)separate files for db prop's,logic 
	
	(5)No exception handling
	
	
	orm tools:-(Object Relational Mapping Tools)
	
	hibernate,ecllipse link,top link,ibatis.......

(1)
	
	class  --------> table
	
	varaiables----->columns
	
	objects-------->rows
		
(2)Query equivalent methods

		EntityManagerFactory

			EntityManager
			
			
			insert----persist()
			
			update----merge();
			
			select----find();
			
			delete---remove();
		
(3)xml file----->db prop's; 		
		
		
		
		
		
		Maven :- build tool 
		
		
									Spring:-
									======
									
		Def:-Spring is a non-invasive framework which is used to develop light-weighted
							and loosley coupled web applications.
	
	
				invasive :- It will rushes the programmer to implements  its api
				
				non-invasive:- It will not rushes the programmer to implements  its api
				
			
			heavy-weighted:-
			
		class A{
		1000 methods
		}	
		clss B extends A{
		10 methods
		}

		clss C  extends B{
		1 met ======>
		
		}			light-weighted :- with consice coding
		
		
			
			tightly -coupled :-if the dependencies are high between the classes
			
			loosley-coupled:- if there are no dependencies or low dependencies 
			
			
			spring core,spring boot,spring rest,spring security,spring cloud.........
				
								Spring Core:-
								============
								
								
	Def:- It's to avoid the dependencies b/n the classes to make our app as loosley-coupled
				
			
		containers:-These are used to create the objects 
		----------	(1)BeanFactory
					(2)ApplicationContext
					
		
		Dependecy Injection:- Injecting data into the object
		--------------------
					(1)setter injection  :- <property></property>
					(2)constructor injection :- <constructor-arg></constructor-arg>
					(3)autowiring
		
		configurations:-
		--------------
					(1)xml configuration.
					(2)Annotation configuration.
		
				<beans>
				
				<bean></bean></beans>
				
				
				
				Spring Boot:-
				============
	
	Advantages:-
	----------
	
	(1)Embedded Server(tomcat:8080)
	
	(2)Starters :-set of jar files
	
	(3)Auto Configuration
	
	(4)Actuators:- health/status  of our application through end point urls.
	
	
	
	Controller :-This layer will interacts with the end user through http url's
	
	dao :- This layer will interact with the database through jpa hibernate methods
	
	services:- This layer will be the mediator between controller and dao layer
	
	
	Spring REST :-
	============
	
	
	webservices :- Webservices are used to make interaction possible between two interoperable 
					applications.
					
					
		SOAP :-xml is only common lang
		
		
		REST :-xml,json,txt,php,...... are the common lang 
		
		
		
							Frontend:-
							=========
							
	HTML:- Hyper Text Markup Lng.
    =====
	
	Linking the text to another webpage/website = Hyper text
	
	
	website :- collection of webpages.3 types:-
	
				(1)static webpages:-changes or updations will not happens regularly
				
				(2)Dynamic webpages:-changes or updations will happens regulary
				
				(3)Server webpages:-All the data from the static nd dynamic webpages will get stored here.
	
	
			.html
			
			
			tags --> 2 types:-
						(1)Container tag/pair:-<html></html>
						
						
						(2)single/empty tag :- <br> or </br> or <br/>
						
						
						
			
			<tag attributes="value"> Statement/content </tag>   ====>elements
			
			
			
			Lists:- <li></li>
			======
			
			
			Bullets :- unordered list ---->   <ul></ul>
			
			Numberings :- ordered list ----->   <ol></ol>
			
			
			Links:- <a></a>
			
			(1)text linking
			
			(2)Img linking
			
			
			elements:- (1)Blocking element   (2)Inline element
			
			
			
											CSS:-
											===
											
		(1)Inline Styling :- using style attribute inside the tag
		
		(2)Internal Styling:- using <style> tag inside the head tag
		
		(3)External Styling:- attaching seperate .css file the html file
		
		
		
		colors:-
		------
		
		(1)color name
		
		(2)hexadecimal -#113344      (r,g,b)	(00-ff)

		(3)rgb -   rgb(123,45,23)(0-255)
		
		(4)rgb with alpha- rgb(23,45,54,(0-1))
		
		(5)hsl - hsl(343,23,45)(0-360,0-100%)
		
		(6)hsl with alpha -hsl(123,45,56,(0-1))
		
		
		
		
		selectors:-
		---------
		
		(1)tag name     -- h1,p,b
		
		(2)id based(#)	-- #idname
		
		(3)class based(.)--.clssname 
		
		(4)universal selector(*)
		
		
									javascript:-
									==========
									
		(1)Dynamic webpage and interative webpages
		
		(2)To change the Html content
		
		(3)To change the html attributes
		
		(4)To change the css styling
		
		(5)To hide the data in our webpage
		
		
		
		(1)script tag inside the head/body tag
		
		(2)By attaching .js file to our html document
		
		
		
		output in js:-
		--------------
		
		(1)innerHTML ----based on the id the content will be displayed on the webpage(getElementById("id"))
		
		
		(2)document.write("text") -------given text will be displayed on the webpage
		
		(3)window.alert("text")  --------given text will be displayed on the alert box
		
		(4)console.log("text ") -----given text is displayed on the console window.
		
		
		
		
		varible :-
		--------
		
						dt vrname = value;
						
						
						var varname;			declaration
						
						var varname = value ;	initialization
					

		Datatypes:-
		----------
		
		
				numbers,string,boolean,object,undefined
				
				
		function:-set of statements where altogether will performs the similar task.
		--------
		
		
				function functions(parameters){
				
				//function body
				
				}